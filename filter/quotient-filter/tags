!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
LOW_MASK	qf.c	14;"	d	file:
MAX	qf.c	13;"	d	file:
QBENCH	test.cc	11;"	d	file:
Q_MAX	test.cc	/^const uint32_t Q_MAX = 12;$/;"	v
ROUNDS_MAX	test.cc	/^const uint32_t ROUNDS_MAX = 1000;$/;"	v
R_MAX	test.cc	/^const uint32_t R_MAX = 6;$/;"	v
clr_continuation	qf.c	/^static inline uint64_t clr_continuation(uint64_t elt)$/;"	f	file:
clr_occupied	qf.c	/^static inline uint64_t clr_occupied(uint64_t elt)$/;"	f	file:
clr_shifted	qf.c	/^static inline uint64_t clr_shifted(uint64_t elt)$/;"	f	file:
decr	qf.c	/^static inline uint64_t decr(struct quotient_filter *qf, uint64_t idx)$/;"	f	file:
delete_entry	qf.c	/^static void delete_entry(struct quotient_filter *qf, uint64_t s, uint64_t quot)$/;"	f	file:
fail	test.cc	/^static void fail(struct quotient_filter *qf, const char *s)$/;"	f	file:
find_run_index	qf.c	/^static uint64_t find_run_index(struct quotient_filter *qf, uint64_t fq)$/;"	f	file:
genhash	test.cc	/^static uint64_t genhash(struct quotient_filter *qf, bool clrhigh,$/;"	f	file:
get_elem	qf.c	/^static uint64_t get_elem(struct quotient_filter *qf, uint64_t idx)$/;"	f	file:
get_remainder	qf.c	/^static inline uint64_t get_remainder(uint64_t elt)$/;"	f	file:
hash_to_quotient	qf.c	/^static inline uint64_t hash_to_quotient(struct quotient_filter *qf,$/;"	f	file:
hash_to_remainder	qf.c	/^static inline uint64_t hash_to_remainder(struct quotient_filter *qf,$/;"	f	file:
ht_check	test.cc	/^static void ht_check(struct quotient_filter *qf, set<uint64_t> &keys)$/;"	f	file:
ht_del	test.cc	/^static void ht_del(struct quotient_filter *qf, set<uint64_t> &keys)$/;"	f	file:
ht_put	test.cc	/^static void ht_put(struct quotient_filter *qf, set<uint64_t> &keys)$/;"	f	file:
incr	qf.c	/^static inline uint64_t incr(struct quotient_filter *qf, uint64_t idx)$/;"	f	file:
insert_into	qf.c	/^static void insert_into(struct quotient_filter *qf, uint64_t s, uint64_t elt)$/;"	f	file:
is_cluster_start	qf.c	/^static inline bool is_cluster_start(uint64_t elt)$/;"	f	file:
is_continuation	qf.c	/^static inline int is_continuation(uint64_t elt)$/;"	f	file:
is_empty_element	qf.c	/^static inline bool is_empty_element(uint64_t elt)$/;"	f	file:
is_occupied	qf.c	/^static inline int is_occupied(uint64_t elt)$/;"	f	file:
is_run_start	qf.c	/^static inline bool is_run_start(uint64_t elt)$/;"	f	file:
is_shifted	qf.c	/^static inline int is_shifted(uint64_t elt)$/;"	f	file:
main	test.cc	/^int main()$/;"	f
qf_bench	test.cc	/^static void qf_bench()$/;"	f	file:
qf_clear	qf.c	/^void qf_clear(struct quotient_filter *qf)$/;"	f
qf_consistent	test.cc	/^static void qf_consistent(struct quotient_filter *qf)$/;"	f	file:
qf_destroy	qf.c	/^void qf_destroy(struct quotient_filter *qf)$/;"	f
qf_elem_bits	qf.h	/^	uint8_t qf_elem_bits;$/;"	m	struct:quotient_filter
qf_elem_mask	qf.h	/^	uint64_t qf_elem_mask;$/;"	m	struct:quotient_filter
qf_entries	qf.h	/^	uint32_t qf_entries;$/;"	m	struct:quotient_filter
qf_index_mask	qf.h	/^	uint64_t qf_index_mask;$/;"	m	struct:quotient_filter
qf_init	qf.c	/^bool qf_init(struct quotient_filter *qf, uint32_t q, uint32_t r)$/;"	f
qf_insert	qf.c	/^bool qf_insert(struct quotient_filter *qf, uint64_t hash)$/;"	f
qf_iterator	qf.h	/^struct qf_iterator {$/;"	s
qf_max_size	qf.h	/^	uint64_t qf_max_size;$/;"	m	struct:quotient_filter
qf_may_contain	qf.c	/^bool qf_may_contain(struct quotient_filter *qf, uint64_t hash)$/;"	f
qf_merge	qf.c	/^bool qf_merge(struct quotient_filter *qf1, struct quotient_filter *qf2,$/;"	f
qf_print	test.cc	/^static void qf_print(struct quotient_filter *qf)$/;"	f	file:
qf_qbits	qf.h	/^	uint8_t qf_qbits;$/;"	m	struct:quotient_filter
qf_rbits	qf.h	/^	uint8_t qf_rbits;$/;"	m	struct:quotient_filter
qf_remove	qf.c	/^bool qf_remove(struct quotient_filter *qf, uint64_t hash)$/;"	f
qf_rmask	qf.h	/^	uint64_t qf_rmask;$/;"	m	struct:quotient_filter
qf_table	qf.h	/^	uint64_t *qf_table;$/;"	m	struct:quotient_filter
qf_table_size	qf.c	/^size_t qf_table_size(uint32_t q, uint32_t r)$/;"	f
qf_test	test.cc	/^static void qf_test(struct quotient_filter *qf)$/;"	f	file:
qfi_done	qf.c	/^bool qfi_done(struct quotient_filter *qf, struct qf_iterator *i)$/;"	f
qfi_index	qf.h	/^	uint64_t qfi_index;$/;"	m	struct:qf_iterator
qfi_next	qf.c	/^uint64_t qfi_next(struct quotient_filter *qf, struct qf_iterator *i)$/;"	f
qfi_quotient	qf.h	/^	uint64_t qfi_quotient;$/;"	m	struct:qf_iterator
qfi_start	qf.c	/^void qfi_start(struct quotient_filter *qf, struct qf_iterator *i)$/;"	f
qfi_visited	qf.h	/^	uint64_t qfi_visited;$/;"	m	struct:qf_iterator
quotient_filter	qf.h	/^struct quotient_filter {$/;"	s
rand64	test.cc	/^static uint64_t rand64()$/;"	f	file:
random_fill	test.cc	/^static void random_fill(struct quotient_filter *qf)$/;"	f	file:
set_continuation	qf.c	/^static inline uint64_t set_continuation(uint64_t elt)$/;"	f	file:
set_elem	qf.c	/^static void set_elem(struct quotient_filter *qf, uint64_t idx, uint64_t elt)$/;"	f	file:
set_occupied	qf.c	/^static inline uint64_t set_occupied(uint64_t elt)$/;"	f	file:
set_shifted	qf.c	/^static inline uint64_t set_shifted(uint64_t elt)$/;"	f	file:
subsetof	test.cc	/^static void subsetof(struct quotient_filter *lhs, struct quotient_filter *rhs)$/;"	f	file:
supersetof	test.cc	/^static void supersetof(struct quotient_filter *qf, struct quotient_filter *qf1,$/;"	f	file:
